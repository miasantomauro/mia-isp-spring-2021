#lang forge

/*
  Base model of strand space (style) crypto
  Tim Mia Abby
  Opting to build in normal Forge, not Electrum
*/

abstract sig mesg {} -- CPSA name for any term

sig Key extends mesg {}
sig PrivateKey extends Key {}
sig PublicKey extends Key {}
sig skey extends Key {}


-- relation to match key pairs -- 

one sig KeyPairs {
  pairs: set PrivateKey -> PublicKey,
  owners: set PrivateKey -> name,
  ltks: set name -> name -> skey
}

fun getLTK[name_a: name, name_b: name]: one skey {
  (KeyPairs.ltks)[name_a][name_b]
}

-- t=0, t=1, ...
sig Timeslot {
  next: lone Timeslot
}

-- As names are sent messagest, they learn pieces of data --
abstract sig name extends mesg {
  learned_times: set mesg -> Timeslot,
  generated_times: set text -> Timeslot
}

one sig Attacker extends name {
}

sig Ciphertext extends mesg {
   encryptionKey: one Key,
   -- result in concating plaintexts
   plaintext: set mesg
}

-- Non-name base value (e.g., nonces)
sig text extends mesg {}

-- {foo}_B
-- Note: this is NOT the same as "mesg"
sig Message {
  -- Support delays, non-reception
  sender: one name,
  receiver: one name,
  sendTime: one Timeslot,
  data: set mesg
}

pred wellformed {
  -- Design choice: only one message event per timeslot;
  --   assume we have a shared notion of time
  
 all t: Timeslot | lone sendTime.t 

  -- You cannot send a message with no data
  all m: Message | some m.data

  -- someone cannot send a message to themselves
  all m: Message | m.sender not in m.receiver
  
  -- names only learn information that they are explicitly sent 
  all d: mesg | all t: Timeslot | all a: name | d->t in a.learned_times iff {
    -- they have not already learned the mesg -- 
    {d not in (a.learned_times).(Timeslot - t.*next)} and 

    -- They received the message
    {{some m: Message | {d in m.data and t = m.sendTime and m.receiver = a}}
    or 
    -- d can be the plaintext of a ciphertext encrypted using a symmetric key which the name has access to the key
    {some m: Message | {some c: Ciphertext | 
					m.receiver = a and
					c in m.data and 
					m.sendTime = t and
					c in (a.learned_times).(Timeslot - t.^next) and 
					d in c.plaintext and 
					c.encryptionKey in skey and 
					c.encryptionKey in (a.learned_times).(Timeslot - t.^next)}}
    or
    -- d is a plaintext of the ciphertext which the name has access to the key encrypted using a publicKey
    -- TODO: allow opening if encrypted with any key, just need to change the lookup
    {some m: Message | {some c: Ciphertext | 
					m.receiver = a and
					c in m.data and 
					m.sendTime = t and
					c in (a.learned_times).(Timeslot - t.^next) and 
					d in c.plaintext and 
					c.encryptionKey in PublicKey and 
					KeyPairs.pairs.(c.encryptionKey) in (a.learned_times).(Timeslot - t.^next)}}
    or 
    -- name knows all public keys
    {d in PublicKey}
    or
    -- name knows the private keys it owns
    {d in PrivateKey and a = d.(KeyPairs.owners)}
    or
    -- name knows long-term keys they are party to
    {some a2 : name - a | d in getLTK[a, a2] + getLTK[a2, a] }
    or
    -- name can encrypt things they know with a key they know
    {d in Ciphertext and 
	d.encryptionKey in (a.learned_times).(Timeslot - t.^next) and
        -- removed to allow nested encryption
	--{all a: d.plaintext | a not in Ciphertext} and 
	d.plaintext in (a.learned_times).(Timeslot - t.^next)}
    or
    -- names know their own names
    {d = a}
    or
    -- This was a value generated by the name in this timeslot
    {d in (a.generated_times).t}    
    }} 
  
  -- If you generate something, you do it once only
  all a: name | all d: text | lone t: Timeslot | d in (a.generated_times).t

  -- Messages comprise only values known by the sender
  all m: Message | m.data in ((m.sender).learned_times).(Timeslot - (m.sendTime).^next) 

  all m: Message | m.sender = Attacker or m.receiver = Attacker 

  -- plaintext relation is acyclic  
  --  NOTE WELL: if ever add another type of mesg that contains data, + inside ^.
  all d: mesg | d not in d.^(plaintext)

  all c: Ciphertext | some c.plaintext

  (KeyPairs.pairs).PublicKey = PrivateKey -- total
  PrivateKey.(KeyPairs.pairs) = PublicKey -- total
  all privKey: PrivateKey | {one pubKey: PublicKey | privKey->pubKey in KeyPairs.pairs} -- uniqueness
  all priv1: PrivateKey | all priv2: PrivateKey - priv1 | all pub: PublicKey | priv1->pub in KeyPairs.pairs implies priv2->pub not in KeyPairs.pairs

  -- at most one long-term key per (ordered) pair of names
  all a:name, b:name | lone getLTK[a,b]
}

pred temporary {
  -- upper bounds for one sig have size > 1 at the moment; fix
  one Attacker

  -- for checking, debugging:
  all a1, a2: name | { 
    -- If one has a key, keys are different
    (some KeyPairs.owners.a1 and a1 != a2) implies 
      (KeyPairs.owners.a1 != KeyPairs.owners.a2)
  }
 
all p: PrivateKey | one p.(KeyPairs.owners) 

  -- number of keys greater than 0
  #Key > 0
}

fun subterm[supers: set mesg]: set mesg {
  -- VITAL: if you add a new subterm relation, needs to be added here, too!
  supers +
  supers.^(plaintext) -- union on new subterm relations inside parens
}

-- Differs slightly in that a is a strand, not a node
pred originates[a: name, d: mesg] {

  -- unsigned term t originates on n in N iff
  --   term(n) is positive and
  --   t subterm of term(n) and
  --   whenever n' precedes n on the same strand, t is not subterm of n'

  some m: sender.a | { -- messages sent by a (positive term)     
      d in subterm[m.data] -- d is a sub-term of m     
      all m2: (sender.a + receiver.a) - m | { -- everything else on the strand
          -- ASSUME: messages are sent/received in same timeslot
          {m2.sendTime in m.sendTime.^(~(next))}
          implies          
          {d not in subterm[m2.data]}
      }
  }
}

pred generates[a: name, d: mesg] {
  some (a.generated_times)[d]
}

/*
run {
  temporary
  wellformed
  ns_execution
  constrain_skeletonNS_0
  constrain_skeletonNS_1
  exploit_search
} for exactly 16 mesg, exactly 6 Key, 
			exactly 2 SkeletonNS, 
			exactly 1 SkeletonNS_0,
 		 	exactly 1 SkeletonNS_1, 
			exactly 3 PrivateKey, 
			exactly 3 PublicKey, 
			exactly 0 skey, 
			exactly 1 Init, 
			exactly 1 Resp, 
			exactly 1 Attacker, 
			exactly 5 Ciphertext, 
			exactly 2 text,
			exactly 6 Message,
 			exactly 6 Timeslot, 
			exactly 1 KeyPairs, 
			exactly 3 name for {next is linear}
*/