#lang forge

/*
  Model of crypto/DS diagrams
  Tim Mia Abby
  Opting to build in normal Forge, not Electrum

   A            B
   |            |
   |----------->|
   |   {foo}_B  |
   |            |
   |<-----------|
   |   {bar}_A  |
       ...
       
time
|
v

*/

abstract sig Datum {}

sig Key extends Datum {}
sig PrivateKey extends Key {}
sig PublicKey extends Key {}
sig SymmetricKey extends Key {}


-- relation to match key pairs -- 

one sig KeyPairs {
 pairs: set PrivateKey -> PublicKey,
 owners: set PrivateKey -> Agent
}

-- t=0, t=1, ...
sig Timeslot {
  next: lone Timeslot
}

-- rename tick to next everywhere
-- might need to add additional constraints to make tick a linear ordering
-- makes bounds exact


-- As agents are sent messagest, they learn pieces of data --
abstract sig Agent extends Datum {
  learned_times: set Datum -> Timeslot,
  generated_times: set Text -> Timeslot
}

one sig Attacker extends Agent {
}

sig Ciphertext extends Datum {
   encryptionKey: one Key,
   -- result in concating plaintexts
   plaintext: set Datum
}

-- Non-name base value (e.g., nonces)
sig Text extends Datum {}

-- {foo}_B
sig Message {
  -- Support delays, non-reception
  sender: one Agent,
  receiver: one Agent,
  sendTime: one Timeslot,
  data: set Datum
}

pred wellformed {
  -- Design choice: only one message event per timeslot;
  --   assume we have a shared notion of time
  
 all t: Timeslot | lone sendTime.t 

  -- You cannot send a message with no data
  all m: Message | some m.data

  -- someone cannot send a message to themselves
  all m: Message | m.sender not in m.receiver
  
  -- agents only learn information that they are explicitly sent 
  all d: Datum | all t: Timeslot | all a: Agent | d->t in a.learned_times iff {
    -- they have not already learned the datum -- 
    {d not in (a.learned_times).(Timeslot - t.*next)} and 

    -- They received the message
    {{some m: Message | {d in m.data and t = m.sendTime and m.receiver = a}}
    or 
    -- d can be the plaintext of a ciphertext encrypted using a symmetric key which the agent has access to the key
    {some m: Message | {some c: Ciphertext | 
					m.receiver = a and
					c in m.data and 
					m.sendTime = t and
					c in (a.learned_times).(Timeslot - t.^next) and 
					d in c.plaintext and 
					c.encryptionKey in SymmetricKey and 
					c.encryptionKey in (a.learned_times).(Timeslot - t.^next)}}
    or
    -- d is a plaintext of the ciphertext which the agent has access to the key encrypted using a publicKey
    {some m: Message | {some c: Ciphertext | 
					m.receiver = a and
					c in m.data and 
					m.sendTime = t and
					c in (a.learned_times).(Timeslot - t.^next) and 
					d in c.plaintext and 
					c.encryptionKey in PublicKey and 
					KeyPairs.pairs.(c.encryptionKey) in (a.learned_times).(Timeslot - t.^next)}}
    or 
    -- Agent knows all public keys
    {d in PublicKey}
    or
    -- Agent knows the private keys it owns
    {d in PrivateKey and a = d.(KeyPairs.owners)}
    or
    -- Agent can encrypt things
    {d in Ciphertext and 
	d.encryptionKey in (a.learned_times).(Timeslot - t.^next) and 
	{all a: d.plaintext | a not in Ciphertext} and 
	d.plaintext in (a.learned_times).(Timeslot - t.^next)}
    or
    -- Agents know their own names
    {d = a}
    or
    -- This was a value generated by the agent in this timeslot
    {d in (a.generated_times).t}    
    }} 
  
  -- If you generate something, you do it once only
  all a: Agent | all d: Text | lone t: Timeslot | d in (a.generated_times).t

  -- Messages comprise only values known by the sender
  all m: Message | m.data in ((m.sender).learned_times).(Timeslot - (m.sendTime).^next) 

  all m: Message | m.sender = Attacker or m.receiver = Attacker 

  -- plaintext relation is acyclic  
  --  NOTE WELL: if ever add another type of datum that contains data, + inside ^.
  all d: Datum | d not in d.^(plaintext)

  all c: Ciphertext | some c.plaintext

  (KeyPairs.pairs).PublicKey = PrivateKey
  PrivateKey.(KeyPairs.pairs) = PublicKey
  all privKey: PrivateKey | {one pubKey: PublicKey | privKey->pubKey in KeyPairs.pairs}
  all priv1: PrivateKey | all priv2: PrivateKey - priv1 | all pub: PublicKey | priv1->pub in KeyPairs.pairs implies priv2->pub not in KeyPairs.pairs
}


-- NS AS PREDICATES STARTS HERE --
----------------------------------------------------------------------

----- PROTOCOL DEFN -----

/*
  (defprotocol ns basic
  (defrole init
    (vars (a b name) (n1 n2 text))
    (trace (send (enc n1 a (pubk b)))
           (recv (enc n1 n2 (pubk a)))
           (send (enc n2 (pubk b)))))
  (defrole resp 
    (vars (a b name) (n1 n2 text))
    (trace (recv (enc n1 a (pubk b)))
           (send (enc n1 n2 (pubk a)))
           (recv (enc n2 (pubk b))))))
*/

sig Init extends Agent {
  -- variables for an init strand:
  init_a, init_b: one Agent, -- alias for Name
  init_n1, init_n2: one Text 
}

sig Resp extends Agent {
  -- variables for a resp strand:
  resp_a, resp_b: one Agent, -- alias for Name
  resp_n1, resp_n2: one Text
}

pred ns_execution {
  
  -- We are conflating 'role' and 'strand' somewhat, although
  -- we think it is safe, since 'role' is embodied as a sig, and 
  --   a strand is an atom of that role
  -- ASSUMPTION: strands have exactly one role
  -- ASSUMPTION: not interested in instances where protocol execution is incomplte
  --    (we enforce all strands to observe their full trace)

  all init: Init | {  
    some t0: Timeslot | 
    some t1: t0.^next | 
    some t2: t1.^next | 
    some m0: Message | 
    some m1: Message - m0 | 
    some m2: Message - m1 - m0 | {  

    -- make this simpler 

      m0.sendTime = t0
      m1.sendTime = t1
      m2.sendTime = t2

  --  (trace (send (enc n1 a (pubk b)))
      -- contains local values for "a" and "n1"
      m0.data.plaintext = init.init_a + init.init_n1

      one m0.data
      -- encrypted with public key of whoever is locally "b"
      -- recall "owners" takes us to private key, and then lookup in pairs
      --m0.data.encryptionKey = KeyPairs.pairs[KeyPairs.owners.(init.init_b)]
      m0.sender = init
      init.init_b not in init
      init.init_a = init
  --         (recv (enc n1 n2 (pubk a)))
      m1.data.plaintext = init.init_n1 + init.init_n2    
      init.init_n1 not in init.init_n2 
      one m1.data
      --m1.data.encryptionKey = KeyPairs.pairs[KeyPairs.owners.(init.init_a)]
      m1.receiver = init
  --         (send (enc n2 (pubk b)))))
      m2.data.plaintext = init.init_n2   
      one m2.data   
      --m2.data.encryptionKey = KeyPairs.pairs[KeyPairs.owners.(init.init_b)]
      m2.sender = init    
    }      
  }

  all resp: Resp | {  
    some t0: Timeslot | 
    some t1: t0.^next | 
    some t2: t1.^next | 
    some m0: Message | 
    some m1: Message - m0 | 
    some m2: Message - m1 - m0 | {  

      m0.sendTime = t0
      m1.sendTime = t1
      m2.sendTime = t2

    --(trace (recv (enc n1 a (pubk b)))                
      -- contains local values for "a" and "n1"
      m0.data.plaintext = resp.resp_a + resp.resp_n1
      one m0.data
      -- encrypted with public key of whoever is locally "b"
      -- recall "owners" takes us to private key, and then lookup in pairs
      --m0.data.encryptionKey = KeyPairs.pairs[KeyPairs.owners.(resp.resp_b)]
      m0.receiver = resp
  --       (send (enc n1 n2 (pubk a)))
      m1.data.plaintext = resp.resp_n1 + resp.resp_n2     
      one m1.data
      m1.data.encryptionKey = KeyPairs.pairs[KeyPairs.owners.(resp.resp_a)]
      m1.sender = resp
  --        (recv (enc n2 (pubk b))))))
      m2.data.plaintext = resp.resp_n2 
      one m2.data     
      m2.data.encryptionKey = KeyPairs.pairs[KeyPairs.owners.(resp.resp_b)]
      m2.receiver = resp
      resp.resp_a not in resp.resp_b
      
    }      
  }
}

----- SKELETON DEFNS -----

/*
(defskeleton ns
 (vars (b name) (n1 text))
 ; ASSUME: 2nd "b" is referring to the variable declared line above
 ; ASSUME: 1st "b" is referring to the variable declared in defrole of protocol
;;; The initiator point-of-view
(defskeleton ns
  (vars (a b name) (n1 text))
  (defstrand init 3 (a a) (b b) (n1 n1))
  (non-orig (privk b) (privk a))
  (uniq-orig n1)
  (comment "Initiator point-of-view"))

;;; The responder point-of-view
(defskeleton ns
  (vars (a b name) (n2 text))
  (defstrand resp 3 (a a) (b b) (n2 n2))
  (non-orig (privk a) (privk b))
  (uniq-orig n2)
  (comment "Responder point-of-view"))
*/
-- TODO: look at defskeleton and defstrand docs
--  what is the (b b)? ANSWER: this is defining the variable b in the role to the *value* of b
--  why say "3" there if init/resp traces have 3 messages each?  This is the max height.  You could not put more than 3 here, but you can put less than 3

-- Assume: defskeleton ns: the strands herein are NS roles
-- Assume: defstrand init ... is talking about a specific init strand

-- First cut
abstract sig SkeletonNS {}
one sig SkeletonNS_0 extends SkeletonNS {
  s0_a: one Agent,
  s0_b: one Agent,
  s0_n1: one Text,
  strand0_0: one Init
}
one sig SkeletonNS_1 extends SkeletonNS {
  s1_a: one Agent,
  s1_b: one Agent,
  s1_n2: one Text,
  strand1_0: one Resp
}

pred constrain_skeletonNS_0 {
  -- (defstrand init 3 (a a) (b b) (n1 n1))
  SkeletonNS_0.strand0_0.init_a = SkeletonNS_0.s0_a
  SkeletonNS_0.strand0_0.init_b = SkeletonNS_0.s0_b
  SkeletonNS_0.strand0_0.init_n1 = SkeletonNS_0.s0_n1
  
  -- (non-orig (privk b) (privk a))
  -- (uniq-orig n1)
  -- ASSUME: meaning of these operators is correct ; it is likely not quite
  --   do we, e.g., need to also assume that the generation EXISTS for unique?
  
  -- nobody generates "a"'s private key (where "a" is in this skeleton's namespace)
  all a: Agent | 
    KeyPairs.owners.(SkeletonNS_0.s0_a) not in a.generated_times.Timeslot + (Attacker.learned_times).Timeslot
  -- ditto "b"
  all a: Agent | 
    KeyPairs.owners.(SkeletonNS_0.s0_b) not in a.generated_times.Timeslot + (Attacker.learned_times).Timeslot

  all a: Agent - SkeletonNS_0.strand0_0 | 
    SkeletonNS_0.s0_n1 not in a.generated_times.Timeslot
}
pred constrain_skeletonNS_1 {
  -- (defstrand resp 3 (a a) (b b) (n2 n2))
  SkeletonNS_1.strand1_0.resp_a = SkeletonNS_1.s1_a
  SkeletonNS_1.strand1_0.resp_b = SkeletonNS_1.s1_b
  SkeletonNS_1.strand1_0.resp_n2 = SkeletonNS_1.s1_n2

  -- (non-orig (privk b) (privk a))
  -- (uniq-orig n2)

  -- nobody generates "a"'s private key (where "a" is in this skeleton's namespace)
  all a: Agent | 
    KeyPairs.owners.(SkeletonNS_1.s1_a) not in a.generated_times.Timeslot + (Attacker.learned_times).Timeslot
  -- ditto "b"
  all a: Agent | 
    KeyPairs.owners.(SkeletonNS_1.s1_b) not in a.generated_times.Timeslot + (Attacker.learned_times).Timeslot

  all a: Agent - SkeletonNS_1.strand1_0 | 
    SkeletonNS_1.s1_n2 not in a.generated_times.Timeslot
}

-- Don't expect skeleton defns to be displayed; they are probably invisible
-- structure that constrains the instance found.

pred exploit_search {
  some t: Text | 
  some c: Ciphertext | 
  some m: Message | 
  some t2: Text - t | 
  some c2: Ciphertext - c | 
  some m2: Message - m | 
  {
    m.data = c and
    t in c.plaintext and
    t in (Attacker.learned_times).Timeslot and

    m2.data = c2 and
    t2 in c2.plaintext and
    t2 in (Attacker.learned_times).Timeslot
  }

}

//pred exploit_search {
//
//	some m: Message {
//		m.data.encryptionKey in  KeyPairs.pairs[KeyPairs.owners.(Attacker)]
//		}
//}

pred temporary {
  -- upper bounds for one sig have size > 1 at the moment; fix
  one Attacker

  -- for checking, debugging:
  all a1, a2: Agent | { 
    -- If one has a key, keys are different
    (some KeyPairs.owners.a1 and a1 != a2) implies 
      (KeyPairs.owners.a1 != KeyPairs.owners.a2)
  }
 
all p: PrivateKey | one p.(KeyPairs.owners) 

  -- number of keys greater than 0
  #Key > 0
}


-- 2 publickey, 3 ciphertext, 3 agent
-- Sigs that we have: Datum, Key, PrivateKey, PublicKey, SymmetricKey, Agent, Attacker, Ciphertext, Text, Message, Timeslot, KeyPairs

run {
  temporary
  wellformed
  ns_execution
  constrain_skeletonNS_0
  constrain_skeletonNS_1
  exploit_search
} for exactly 16 Datum, exactly 6 Key, 
			exactly 2 SkeletonNS, 
			exactly 1 SkeletonNS_0,
 		 	exactly 1 SkeletonNS_1, 
			exactly 3 PrivateKey, 
			exactly 3 PublicKey, 
			exactly 0 SymmetricKey, 
			exactly 1 Init, 
			exactly 1 Resp, 
			exactly 1 Attacker, 
			exactly 5 Ciphertext, 
			exactly 2 Text,
			exactly 6 Message,
 			exactly 6 Timeslot, 
			exactly 1 KeyPairs, 
			exactly 3 Agent for {next is linear}
