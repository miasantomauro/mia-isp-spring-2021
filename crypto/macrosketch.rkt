#lang forge/core

; Module to accept CPSA protocol and skeleton definitions and enhance a
; base crypto specification with protocol/skeleton-specific sigs and constraints.
;   Tim and Abby (Spring 2021)

(require (for-syntax racket/syntax))
(require syntax/parse syntax/parse/define)
(require (for-syntax (only-in racket take last flatten)))


; For debugging speed, don't import the full spec yet
(sig Agent)
; TODO: swap above with the below, once finalized
;(require "current_model.rkt") ; the base crypto modl

; First, define some syntax classes to ease parsing and improve errors.
; Syntax classes can expose custom attributes, which make them easier to process.
; Since these classes are used by macros, we need to define them for-syntax
(begin-for-syntax

  ;(defrole init
  ;    (vars (a b name) (n1 n2 text))
  ;    (trace (send (enc n1 a (pubk b)))
  ;           (recv (enc n1 n2 (pubk a)))
  ;           (send (enc n2 (pubk b)))))
  (define-syntax-class defroleClass
    (pattern ((~literal defrole)
              rname:id
              vars:varsClass
              trace:traceClass)             
             #:attr vardecls #'(vars.decls ...)
             ))
  
;  (vars (a b name) (n1 n2 text))
  (define-syntax-class varsClass
    (pattern ((~literal vars)
              decls:varsGrouping ...)))
  (define-syntax-class varsGrouping
    (pattern (var-or-type:id ...)))
  
;    (trace (send (enc n1 a (pubk b)))
;           (recv (enc n1 n2 (pubk a)))
;           (send (enc n2 (pubk b)))))
  (define-syntax-class traceClass
    (pattern ((~literal trace)
              events:eventClass ...)))
  
  (define-syntax-class eventClass
    (pattern ((~literal send) enc:encClass))
    (pattern ((~literal recv) enc:encClass)))
  (define-syntax-class encClass
    (pattern ((~literal enc)
              vals:id ...
              ((~literal pubk)
               pubkeyowner))))

  ;  (non-orig (privk a) (privk b))
  (define-syntax-class nonOrigClass
    (pattern ((~literal non-orig)
              data:datumClass ...)))
  ;  (uniq-orig n2)
  (define-syntax-class uniqOrigClass
    (pattern ((~literal uniq-orig)
              data:datumClass ...)))
  ; n1, a, (pubk a), (privk a)
  (define-syntax-class datumClass
    (pattern ((~literal privk) x:id))
    (pattern ((~literal pubk) x:id))
    (pattern x:id))

  ; (a1 a2)
  (define-syntax-class bindingClass
    (pattern (x1:id x2:id)))

  ; (comment "this is a comment")
  (define-syntax-class commentClass
    (pattern ((~literal comment) comment:string)))
    
  ;  (defstrand resp 3 (a a) (b b) (n2 n2))
  (define-syntax-class strandClass
    (pattern ((~literal defstrand)
              strandrole:id
              height:number
              bindings:bindingClass ...)))

) ; end begin-for-syntax


; Helper syntax, generated by "defprotocol" to add context
; Produces forge declarations (sigs, relations, predicates...) for a role
(define-syntax (roleforge stx)
  (syntax-parse stx
    [(roleforge pname:id role:defroleClass)     
     #`(begin
         ; subsig for agents having this role
         (sig #,(format-id #'pname "~a_~a" #'pname #'role.rname) #:extends Agent) ; declare sig
         ; variable fields of that subsig as declared
         #,@(flatten
             (for/list ([decls (syntax->list #'role.vardecls)]) ; for each variable grouping                      
               (let ([type (last (syntax->list decls))])      ; last element is the type
                 (for/list ([varid (take (syntax->list decls) (- (length (syntax->list decls)) 1))]) ; for each var decl                          
                   #`(relation
                      #,(format-id #'role.rname "~a_~a_~a" #'pname #'role.rname varid)
                      (role.rname #,type))))))
         ; execution predicate for agents having this role
         (pred #,(format-id #'pname "exec_~a_~a" #'pname #'role.rname) true)
         ; ^ TODO predicate body
         )]))

; Main macro for defprotocol declarations
(define-syntax (defprotocol stx)
  (syntax-parse stx [(defprotocol pname:id ptype:id roles:defroleClass ...)
                     (quasisyntax/loc stx
                       (begin (roleforge pname roles) ...))]))

;(defskeleton ns
;  (vars (a b name) (n2 text))
;  (defstrand resp 3 (a a) (b b) (n2 n2))
;  (non-orig (privk a) (privk b))
;  (uniq-orig n2)
;  (comment "Responder point-of-view"))

; Main macro for defskeleton declarations
; Note optional comment parameter
; since skeletons aren't named by the input, generate our own index
(define-for-syntax (unbox-and-increment b)
  (let ([result (unbox b)])
    (set-box! b (+ result 1))
    result))
(define-for-syntax skeleton-index (box 0))
(define-syntax (defskeleton stx)
  (syntax-parse stx [(defskeleton pname:id vars:varsClass strand:strandClass
                       non-orig:nonOrigClass uniq-orig:uniqOrigClass (~optional comment:commentClass))
                     (quasisyntax/loc stx
                       (begin
                         ; subsig for skeleton
                         (sig #,(format-id #'pname "skeleton_~a_~a" #'pname (unbox-and-increment skeleton-index)) #:one) ; declare sig
                         ; TODO: variable fields (similar to protocol case)
                         ; TODO: predicate
                         ))]))
;(pname vars strand non-orig uniq-orig comment)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Tests (local for now)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Needham-Schroeder example from CSPA
(defprotocol ns basic
  (defrole init
    (vars (a b name) (n1 n2 text))
    (trace (send (enc n1 a (pubk b)))
           (recv (enc n1 n2 (pubk a)))
           (send (enc n2 (pubk b)))))
  (defrole resp 
    (vars (a b name) (n1 n2 text))
    (trace (recv (enc n1 a (pubk b)))
           (send (enc n1 n2 (pubk a)))
           (recv (enc n2 (pubk b))))))

(defskeleton ns
  (vars (a b name) (n1 text))
  (defstrand init 3 (a a) (b b) (n1 n1))
  (non-orig (privk b) (privk a))
  (uniq-orig n1)
  (comment "Initiator point-of-view"))

(defskeleton ns
  (vars (a b name) (n2 text))
  (defstrand resp 3 (a a) (b b) (n2 n2))
  (non-orig (privk a) (privk b))
  (uniq-orig n2)
  (comment "Responder point-of-view"))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Confirm
(hash-keys (forge:State-sigs forge:curr-state))
(hash-keys (forge:State-relations forge:curr-state))
(hash-keys (forge:State-pred-map forge:curr-state))
